file_path <- '/home/amir/Documents/3rd_semester/non_parametric_STAT/ex4/belvalsearches.csv'
data <- read.csv(file_path)
head(data, 5)
library(tidyverse)
# In this section, to plot "Belval", we change the "Week" column to index. So, it is easier to visualize.
my_data <- data %>%
mutate(Date = as.Date(Week, format = "%Y-%m-%d"),
Week_idx = row_number())
my_data <- my_data[, c("Week_idx", "Belval")]
head(my_data, 5)
# let's do a scatter plot of my_data.
plot(my_data$Week_idx, my_data$Belval,
xlab = "week_index", ylab = "Belval",
pch = 16, col = "blue")
# Assuming your dataset is already loaded and named "your_data"
# Perform LOESS smoothing
loess_model <- loess(Belval ~ Week_idx, data = your_data)
# Assuming your dataset is already loaded and named "your_data"
# Perform LOESS smoothing
loess_model <- loess(Belval ~ Week_idx, data = my_data)
# Predictions
new_week_idx <- seq(min(your_data$Week_idx), max(your_data$Week_idx), length.out = 100)  # Example new values of 'Week_idx'
# Assuming your dataset is already loaded and named "your_data"
# Perform LOESS smoothing
loess_model <- loess(Belval ~ Week_idx, data = my_data)
# Predictions
new_week_idx <- seq(min(my_data$Week_idx), max(my_data$Week_idx), length.out = 100)  # Example new values of 'Week_idx'
predicted_belval <- predict(loess_model, newdata = data.frame(Week_idx = new_week_idx))
# Visualization
plot(my_data$Week_idx, my_data$Belval, main = "LOESS Smoothing", xlab = "Week_idx", ylab = "Belval")
lines(new_week_idx, predicted_belval, col = "red", lwd = 2)
# Assuming your dataset is already loaded and named "your_data"
# Perform LOESS smoothing
loess_model <- loess(Belval ~ Week_idx, data = my_data, span = 0.5)
# Predictions
new_week_idx <- seq(min(my_data$Week_idx), max(my_data$Week_idx), length.out = 100)  # Example new values of 'Week_idx'
predicted_belval <- predict(loess_model, newdata = data.frame(Week_idx = new_week_idx))
# Visualization
plot(my_data$Week_idx, my_data$Belval, main = "LOESS Smoothing", xlab = "Week_idx", ylab = "Belval")
lines(new_week_idx, predicted_belval, col = "red", lwd = 2)
# Assuming your dataset is already loaded and named "your_data"
# Perform LOESS smoothing
loess_model <- loess(Belval ~ Week_idx, data = my_data, span = 0.1)
# Predictions
new_week_idx <- seq(min(my_data$Week_idx), max(my_data$Week_idx), length.out = 100)  # Example new values of 'Week_idx'
predicted_belval <- predict(loess_model, newdata = data.frame(Week_idx = new_week_idx))
# Visualization
plot(my_data$Week_idx, my_data$Belval, main = "LOESS Smoothing", xlab = "Week_idx", ylab = "Belval")
lines(new_week_idx, predicted_belval, col = "red", lwd = 2)
# Assuming your dataset is already loaded and named "your_data"
# Perform LOESS smoothing
loess_model <- loess(Belval ~ Week_idx, data = my_data, span = 0.01)
# Predictions
new_week_idx <- seq(min(my_data$Week_idx), max(my_data$Week_idx), length.out = 100)  # Example new values of 'Week_idx'
predicted_belval <- predict(loess_model, newdata = data.frame(Week_idx = new_week_idx))
# Visualization
plot(my_data$Week_idx, my_data$Belval, main = "LOESS Smoothing", xlab = "Week_idx", ylab = "Belval")
lines(new_week_idx, predicted_belval, col = "red", lwd = 2)
# let's do a scatter plot of my_data.
plot(my_data$Week_idx, my_data$Belval,
xlab = "week_index", ylab = "Belval",
pch = 16, col = "blue")
# here we use "for" loops to calculate density estimator.
# Let's implement the formula given above. We've used the normal kernel function and bandwidth h = 1 to do the estimations. however, we can set any h>0 we wish.
n<-nrow(my_data)
my_matrix1 <- matrix(NA, nrow=n, ncol=n)
my_matrix2 <- matrix(NA, nrow=n, ncol=n)
for(i in 1:n)
{
for(j in 1:n){
my_matrix1[i,j]<-dnorm(my_data$Week_idx[i]-my_data$Week_idx[j])*my_data$Belval[j]
my_matrix2[i,j]<-dnorm(my_data$Week_idx[i]-my_data$Week_idx[j])
}
}
fx<-c()
for(i in 1:n){
fx[i]<-sum(my_matrix1[i,])/sum(my_matrix2[i,])
}
# Also, R has a build-in function ksmooth() for the NW estimator. We could use it simply as well,
# however now we can compare our implementation and this built-in function performance.
z_R = ksmooth(my_data$Week_idx, my_data$Belval, kernel = "normal", bandwidth = 1)
plot(my_data$Week_idx, my_data$Belval, xlab='week_index', ylab='Belval')
lines(my_data$Week_idx,fx,type='l',col='blue',lwd=3)
lines(z_R$x, z_R$y, type='l',col='red',lwd=3)
library(MASS)
h_values <- c(0.5, 2.5, 5, 10)  # list of desired bandwidths.
plot(my_data$Week_idx, my_data$Belval, type = "n",
xlab = "Week_index", ylab = "Belval")
plot_colors <- c("blue", "green", "red", "black")
# for loop iterates over the h values.
for (i in seq_along(h_values)) {
z <- ksmooth(my_data$Week_idx, my_data$Belval, kernel = "normal", bandwidth = h_values[i])
lines(z, col = plot_colors[i], lwd = 2)
}
legend("bottomleft", legend = paste("Bandwidth =", h_values), col = plot_colors, lty = 1, lwd = 2, cex = 0.8)
# Assuming your dataset is already loaded and named "your_data"
# Perform LOESS smoothing
loess_model <- loess(Belval ~ Week_idx, data = my_data, span = 0.5)
# Predictions
new_week_idx <- seq(min(my_data$Week_idx), max(my_data$Week_idx), length.out = 100)  # Example new values of 'Week_idx'
predicted_belval <- predict(loess_model, newdata = data.frame(Week_idx = new_week_idx))
# Visualization
plot(my_data$Week_idx, my_data$Belval, main = "LOESS Smoothing", xlab = "Week_idx", ylab = "Belval")
lines(new_week_idx, predicted_belval, col = "red", lwd = 2)
# Assuming your dataset is already loaded and named "your_data"
# Perform LOESS smoothing
loess_model <- loess(Belval ~ Week_idx, data = my_data, span = 0.05)
# Predictions
new_week_idx <- seq(min(my_data$Week_idx), max(my_data$Week_idx), length.out = 100)  # Example new values of 'Week_idx'
predicted_belval <- predict(loess_model, newdata = data.frame(Week_idx = new_week_idx))
# Visualization
plot(my_data$Week_idx, my_data$Belval, main = "LOESS Smoothing", xlab = "Week_idx", ylab = "Belval")
lines(new_week_idx, predicted_belval, col = "red", lwd = 2)
# Define the values of span to try
span_values <- c(1, 0.5, 0.25, 0.05)
# Create a plot with multiple panels
par(mfrow = c(2, 2))  # Create a 2x2 grid of plots
# Loop through each value of span
for (span in span_values) {
# Perform LOESS smoothing
loess_model <- loess(Belval ~ Week_idx, data = my_data, span = span)
# Predictions
new_week_idx <- seq(min(my_data$Week_idx), max(my_data$Week_idx), length.out = 100)
predicted_belval <- predict(loess_model, newdata = data.frame(Week_idx = new_week_idx))
# Plot the LOESS smoothing
plot(my_data$Week_idx, my_data$Belval, main = paste("LOESS Smoothing (Span =", span, ")", sep = ""), xlab = "Week_idx", ylab = "Belval")
lines(new_week_idx, predicted_belval, col = "red", lwd = 2)
}
# Reset the plot layout
par(mfrow = c(1, 1))  # Reset to single panel
# values of span to try
span_values <- c(1, 0.5, 0.25, 0.05)
par(mfrow = c(2, 2))  # Create a 2x2 grid of plots
for (span in span_values) {
# LOESS smoothing
loess_model <- loess(Belval ~ Week_idx, data = my_data, span = span)
new_week_idx <- seq(min(my_data$Week_idx), max(my_data$Week_idx), length.out = 100)
predicted_belval <- predict(loess_model, newdata = data.frame(Week_idx = new_week_idx))
plot(my_data$Week_idx, my_data$Belval, main = paste("LOESS Smoothing (Span =", span, ")", sep = ""), xlab = "Week_idx", ylab = "Belval")
lines(new_week_idx, predicted_belval, col = "red", lwd = 2)
}
span_values <- c(1, 0.5, 0.25, 0.05)   # values of span to try
par(mfrow = c(2, 2))                   # Create a 2x2 grid of plots
for (span in span_values) {
loess_model <- loess(Belval ~ Week_idx, data = my_data, span = span)   # LOESS smoothing
new_week_idx <- seq(min(my_data$Week_idx), max(my_data$Week_idx), length.out = 100)
predicted_belval <- predict(loess_model, newdata = data.frame(Week_idx = new_week_idx))
plot(my_data$Week_idx, my_data$Belval, main = paste("LOESS Smoothing (Span =", span, ")", sep = ""), xlab = "Week_idx", ylab = "Belval")
lines(new_week_idx, predicted_belval, col = "red", lwd = 2)
}
